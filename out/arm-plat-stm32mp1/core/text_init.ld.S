	*(.text.read_cntfrq)
	*(.text.read_cntpct)
	*(.text.isb)
	*(.text.barrier_read_counter_timer)
	*(.text.arm_cnt_us2cnt)
	*(.text.timeout_init_us)
	*(.text.timeout_elapsed)
	*(.text.udelay)
	*(.text.mdelay)
	*(.text.dsb)
	*(.text.wfi)
	*(.text.cpu_idle)
	*(.text.__cpu_spin_lock)
	*(.text.__cpu_spin_trylock)
	*(.text.__cpu_spin_unlock)
	*(.text.tlbi_all)
	*(.text.tlbi_mva_allasid)
	*(.text.dcache_cleaninv_range)
	*(.text.dcache_clean_range)
	*(.text.dcache_inv_range)
	*(.text.dcache_clean_range_pou)
	*(.text.do_dcsw_op)
	*(.text.dcache_op_louis)
	*(.text.dcache_op_all)
	*(.text.dcache_op_level1)
	*(.text.icache_inv_all)
	*(.text.icache_inv_range)
	*(.text.thread_set_abt_sp)
	*(.text.thread_set_und_sp)
	*(.text.thread_set_irq_sp)
	*(.text.thread_set_fiq_sp)
	*(.text.thread_resume)
	*(.text.thread_save_state)
	*(.text.thread_init_vbar)
	*(.text.thread_unwind_user_mode)
	*(.text.thread_excp_vect)
	*(.text.read_midr)
	*(.text.read_cpsr)
	*(.text.write_cpsr)
	*(.text.asan_tag_access)
	*(.text.mutex_lockdep_init)
	*(.text.tee_ta_update_session_utime_suspend)
	*(.text.tee_ta_update_session_utime_resume)
	*(.text.tee_ta_gprof_sample_pc)
	*(.text.tee_ta_ftrace_update_times_suspend)
	*(.text.tee_ta_ftrace_update_times_resume)
	*(.text.get_core_pos)
	*(.text.spinlock_count_incr)
	*(.text.spinlock_count_decr)
	*(.text.assert_have_no_spinlock)
	*(.text.cpu_spin_lock_no_dldetect)
	*(.text.cpu_spin_lock)
	*(.text.cpu_spin_unlock)
	*(.text.tee_mm_get_size)
	*(.text.fobj_put)
	*(.text.init_canaries)
	*(.text.thread_check_canaries)
	*(.text.thread_lock_global)
	*(.text.thread_unlock_global)
	*(.text.thread_get_exceptions)
	*(.text.thread_set_exceptions)
	*(.text.thread_mask_exceptions)
	*(.text.thread_unmask_exceptions)
	*(.text.get_core_local)
	*(.text.thread_get_core_local)
	*(.text.print_stack_limits)
	*(.text.thread_lazy_save_ns_vfp)
	*(.text.thread_lazy_restore_ns_vfp)
	*(.text.init_regs)
	*(.text.thread_init_boot_thread)
	*(.text.thread_clr_boot_thread)
	*(.text.__thread_alloc_and_run)
	*(.text.thread_alloc_and_run)
	*(.text.copy_a0_to_a3)
	*(.text.is_from_user)
	*(.text.ftrace_suspend)
	*(.text.ftrace_resume)
	*(.text.is_user_mode)
	*(.text.thread_resume_from_rpc)
	*(.text.thread_get_tmp_sp)
	*(.text.thread_is_from_abort_mode)
	*(.text.thread_state_free)
	*(.text.release_unused_kernel_stack)
	*(.text.thread_state_suspend)
	*(.text.set_tmp_stack)
	*(.text.set_abt_stack)
	*(.text.thread_init_stack)
	*(.text.thread_get_id_may_fail)
	*(.text.thread_get_id)
	*(.text.init_thread_stacks)
	*(.text.init_user_kcode)
	*(.text.thread_init_threads)
	*(.text.thread_init_thread_core_local)
	*(.text.thread_init_primary)
	*(.text.init_sec_mon_stack)
	*(.text.get_midr_implementer)
	*(.text.get_midr_primary_part)
	*(.text.select_vector)
	*(.text.get_excp_vect)
	*(.text.thread_init_per_cpu)
	*(.text.thread_get_tsd)
	*(.text.thread_get_ctx_regs)
	*(.text.thread_restore_foreign_intr)
	*(.text.thread_kernel_save_vfp)
	*(.text.thread_kernel_restore_vfp)
	*(.text.thread_user_enable_vfp)
	*(.text.thread_user_save_vfp)
	*(.text.setup_unwind_user_mode)
	*(.text.gprof_set_status)
	*(.text.thread_svc_handler)
	*(.text.thread_handle_fast_smc)
	*(.text.thread_handle_std_smc)
	*(.text.thread_disable_prealloc_rpc_cache)
	*(.text.thread_enable_prealloc_rpc_cache)
	*(.text.thread_std_smc_entry)
	*(.text.thread_foreign_intr_exit)
	*(.text.read_contextidr)
	*(.text.read_ttbr0)
	*(.text.read_ttbr1)
	*(.text.read_dfar)
	*(.text.read_dfsr)
	*(.text.read_ifar)
	*(.text.read_ifsr)
	*(.text.to_user_ta_ctx)
	*(.text.is_sp_ctx)
	*(.text.to_sp_ctx)
	*(.text.to_stmm_ctx)
	*(.text.to_user_mode_ctx)
	*(.text.__print_stack_unwind)
	*(.text.abort_type_to_str)
	*(.text.fault_to_str)
	*(.text.__print_abort_info)
	*(.text.__abort_print)
	*(.text.abort_print)
	*(.text.abort_print_error)
	*(.text.save_abort_info_in_tsd)
	*(.text.set_abort_info)
	*(.text.handle_user_mode_panic)
	*(.text.handle_user_mode_vfp)
	*(.text.abort_is_user_exception)
	*(.text.is_vfp_fault)
	*(.text.abort_is_write_fault)
	*(.text.get_fault_type)
	*(.text.abort_handler)
	*(.text.vfp_is_enabled)
	*(.text.vfp_enable)
	*(.text.vfp_disable)
	*(.text.vfp_lazy_save_state_init)
	*(.text.vfp_lazy_save_state_final)
	*(.text.vfp_lazy_restore_state)
	*(.text.vfp_save_extension_regs)
	*(.text.vfp_restore_extension_regs)
	*(.text.vfp_write_fpexc)
	*(.text.vfp_read_fpexc)
	*(.text.vfp_write_fpscr)
	*(.text.vfp_read_fpscr)
	*(.text.cpu_spin_trylock)
	*(.text.plat_trace_ext_puts)
	*(.text.trace_ext_puts)
	*(.text.trace_ext_get_thread_id)
	*(.text.trace_ext_get_core_id)
	*(.text.get_core_pos_mpidr)
	*(.text.temp_set_mode)
	*(.text.read_mode_sp)
	*(.text.read_mode_lr)
	*(.text.read_cpacr)
	*(.text.write_cpacr)
	*(.text.read_nsacr)
	*(.text.write_nsacr)
	*(.text.write_cntfrq)
	*(.text.dsb_ishst)
	*(.text.dmb)
	*(.text.sev)
	*(.text.asan_memcpy_unchecked)
	*(.text.plat_primary_init_early)
	*(.text.init_sec_mon)
	*(.text.init_vfp_nsec)
	*(.text.init_vfp_sec)
	*(.text.primary_save_cntfrq)
	*(.text.secondary_init_cntfrq)
	*(.text.init_asan)
	*(.text.carve_out_asan_mem)
	*(.text.print_pager_pool_size)
	*(.text.init_vcore)
	*(.text.undo_init_relocation)
	*(.text.ro_paged_alloc)
	*(.text.init_runtime)
	*(.text.init_primary)
	*(.text.init_secondary_helper)
	*(.text.boot_init_primary_early)
	*(.text.boot_init_secondary)
	*(.text.boot_set_core_ns_entry)
	*(.text.boot_core_release)
	*(.text.boot_core_hpen)
	*(.text._start)
	*(.text.unhandled_cpu)
	*(.text.dummy.boot_init_primary_late)
	*(.text.dummy.__thread_std_smc_entry)
	*(.text.read_sctlr)
	*(.text.write_tlbimvaais)
	*(.text.write_ats1cpr)
	*(.text.read_par64)
	*(.text.dsb_ish)
	*(.text.tlbi_mva_allasid_nosync)
	*(.text.teecore_memtype_name)
	*(.text.core_mmu_va2idx)
	*(.text.core_mmap_is_end_of_table)
	*(.text.get_memory_map)
	*(.text._pbuf_intersects)
	*(.text._pbuf_is_inside)
	*(.text.pa_is_in_map)
	*(.text.pbuf_inside_map_area)
	*(.text.find_map_by_type)
	*(.text.find_map_by_type_and_pa)
	*(.text.find_map_by_pa)
	*(.text.pbuf_is_special_mem)
	*(.text.get_discovered_nsec_ddr)
	*(.text.pbuf_is_nsec_ddr)
	*(.text.core_mmu_nsec_ddr_is_defined)
	*(.text.pbuf_is_sdp_mem)
	*(.text.add_phys_mem)
	*(.text.add_va_space)
	*(.text.core_mmu_type_to_attr)
	*(.text.map_is_tee_ram)
	*(.text.cmp_mmap_by_lower_va)
	*(.text.dump_mmap_table)
	*(.text.dump_xlat_table)
	*(.text.add_pager_vaspace)
	*(.text.check_sec_nsec_mem_config)
	*(.text.collect_mem_ranges)
	*(.text.assign_mem_granularity)
	*(.text.assign_mem_va)
	*(.text.cmp_init_mem_map)
	*(.text.init_mem_map)
	*(.text.check_mem_map)
	*(.text.get_tmp_mmap)
	*(.text.core_init_mmu_map)
	*(.text.core_pbuf_is)
	*(.text.map_pa2va)
	*(.text.core_mmu_get_mem_by_type)
	*(.text.core_mmu_get_type_by_pa)
	*(.text.tlbi_mva_range)
	*(.text.core_mmu_set_entry)
	*(.text.core_mmu_get_entry)
	*(.text.can_map_at_level)
	*(.text.core_mmu_map_region)
	*(.text.arm_va2pa_helper)
	*(.text.get_linear_map_end)
	*(.text.check_pa_matches_va)
	*(.text.virt_to_phys)
	*(.text.check_va_matches_pa)
	*(.text.phys_to_virt_ts_vaspace)
	*(.text.phys_to_virt_tee_ram)
	*(.text.phys_to_virt)
	*(.text.phys_to_virt_io)
	*(.text.cpu_mmu_enabled)
	*(.text.io_pa_or_va)
	*(.text.io_pa_or_va_secure)
	*(.text.core_mmu_init_ta_ram)
	*(.text.write_tlbimvais)
	*(.text.io_write8)
	*(.text.asan_tag_no_access)
	*(.text.pgt_inc_used_entries)
	*(.text.pgt_dec_used_entries)
	*(.text.pgt_set_used_entries)
	*(.text.cpu_spin_lock_xsave_no_dldetect)
	*(.text.cpu_spin_lock_xsave)
	*(.text.cpu_spin_unlock_xrestore)
	*(.text.tlbi_mva_asid_nosync)
	*(.text.tlbi_mva_asid)
	*(.text.core_mmu_idx2va)
	*(.text.fobj_load_page)
	*(.text.fobj_save_page)
	*(.text.fobj_get_iv_vaddr)
	*(.text.fobj_get)
	*(.text.is_stmm_ctx)
	*(.text.is_user_mode_ctx)
	*(.text.incr_ro_hits)
	*(.text.incr_rw_hits)
	*(.text.incr_hidden_hits)
	*(.text.incr_zi_released)
	*(.text.incr_npages_all)
	*(.text.set_npages)
	*(.text.tee_pager_get_stats)
	*(.text.pager_lock)
	*(.text.pager_lock_check_stack)
	*(.text.pager_unlock)
	*(.text.tee_pager_phys_to_virt)
	*(.text.pmem_is_hidden)
	*(.text.pmem_is_dirty)
	*(.text.pmem_is_covered_by_region)
	*(.text.get_pgt_count)
	*(.text.region_have_pgt)
	*(.text.pmem_get_region_tblidx)
	*(.text.find_pager_table_may_fail)
	*(.text.find_pager_table)
	*(.text.tee_pager_get_table_info)
	*(.text.find_table_info)
	*(.text.find_core_pgt)
	*(.text.tee_pager_set_alias_area)
	*(.text.tbl_usage_count)
	*(.text.tblidx_get_entry)
	*(.text.tblidx_set_entry)
	*(.text.region_va2tblidx)
	*(.text.tblidx2va)
	*(.text.tblidx_tlbi_entry)
	*(.text.pmem_assign_fobj_page)
	*(.text.pmem_clear)
	*(.text.pmem_unmap)
	*(.text.tee_pager_early_init)
	*(.text.pager_add_alias_page)
	*(.text.region_insert)
	*(.text.alloc_region)
	*(.text.tee_pager_add_core_region)
	*(.text.find_region)
	*(.text.find_uta_region)
	*(.text.get_region_mattr)
	*(.text.get_pmem_pa)
	*(.text.pmem_find)
	*(.text.tee_pager_unhide_page)
	*(.text.tee_pager_hide_pages)
	*(.text.tee_pager_release_one_phys)
	*(.text.pager_deploy_page)
	*(.text.make_dirty_page)
	*(.text.make_iv_available)
	*(.text.pager_get_page)
	*(.text.pager_update_permissions)
	*(.text.stat_handle_fault)
	*(.text.tee_pager_handle_fault)
	*(.text.tee_pager_add_pages)
	*(.text.tee_pager_release_phys)
	*(.text.tee_pager_alloc)
	*(.text.read_ttbr0_64bit)
	*(.text.write_ttbr0_64bit)
	*(.text.feat_bti_is_implemented)
	*(.text.core_mmu_is_dynamic_vaspace)
	*(.text.get_prtn)
	*(.text.desc_to_mattr)
	*(.text.mattr_to_desc)
	*(.text.core_mmu_xlat_table_alloc)
	*(.text.core_mmu_xlat_table_entry_pa2va)
	*(.text.core_init_mmu_prtn_tee)
	*(.text.set_user_va_idx)
	*(.text.core_init_mmu_prtn_ta_core)
	*(.text.core_init_mmu_prtn_ta)
	*(.text.core_init_mmu)
	*(.text.core_mmu_place_tee_ram_at_top)
	*(.text.core_init_mmu_regs)
	*(.text.core_mmu_find_table)
	*(.text.core_mmu_entry_to_finer_grained)
	*(.text.core_mmu_set_entry_primitive)
	*(.text.core_mmu_get_entry_primitive)
	*(.text.core_mmu_get_user_va_range)
	*(.text.core_mmu_get_user_mapping_entry)
	*(.text.core_mmu_user_mapping_is_active)
	*(.text.core_mmu_get_user_map)
	*(.text.core_mmu_set_user_map)
	*(.text.core_mmu_get_fault_type)
	*(.text.pmalloc)
	*(.text.pcalloc)
	*(.text.pfree)
	*(.text.tee_mm_init)
	*(.text.tee_mm_final)
	*(.text.tee_mm_add)
	*(.text.tee_mm_stats_allocated)
	*(.text.update_max_allocated)
	*(.text.tee_mm_alloc)
	*(.text.fit_in_gap)
	*(.text.tee_mm_alloc2)
	*(.text.tee_mm_free)
	*(.text.tee_mm_get_bytes)
	*(.text.tee_mm_is_empty)
	*(.text.tee_mm_get_smem)
	*(.text.pgt_init)
	*(.text.reg_pair_to_64)
	*(.text.reg_pair_from_64)
	*(.text.tee_enable_l2cc_mutex)
	*(.text.tee_disable_l2cc_mutex)
	*(.text.tee_get_l2cc_mutex)
	*(.text.tee_set_l2cc_mutex)
	*(.text.core_mmu_is_shm_cached)
	*(.text.tee_entry_get_shm_config)
	*(.text.tee_entry_fastcall_l2cc_mutex)
	*(.text.tee_entry_exchange_capabilities)
	*(.text.tee_entry_disable_shm_cache)
	*(.text.tee_entry_enable_shm_cache)
	*(.text.tee_entry_boot_secondary)
	*(.text.tee_entry_get_thread_count)
	*(.text.tee_entry_fast)
	*(.text.__tee_entry_fast)
	*(.text.tee_entry_generic_get_api_call_count)
	*(.text.tee_entry_get_api_call_count)
	*(.text.tee_entry_get_api_uuid)
	*(.text.tee_entry_get_api_revision)
	*(.text.tee_entry_get_os_uuid)
	*(.text.tee_entry_get_os_revision)
	*(.text.io_read32)
	*(.text.console_init)
	*(.text.stm32_dbgmcu_base)
	*(.text.stm32mp1_dbgmcu_get_chip_dev_id)
	*(.text.itr_core_handler)
	*(.text.main_secondary_init_gic)
	*(.text.get_gicd_base)
	*(.text.may_spin_lock)
	*(.text.may_spin_unlock)
	*(.text.stm32_tamp_base)
	*(.text.bkpreg_base)
	*(.text.stm32mp_bkpreg)
	*(.text.stm32mp_bkpsram_base)
	*(.text.stm32mp_stgen_base)
	*(.text.get_chip_dev_id)
	*(.text.get_part_number)
	*(.text.stm32mp_supports_hw_cryp)
	*(.text.stm32mp_supports_second_core)
	*(.text.plat_cpu_reset_early)
	*(.text.io_write32)
	*(.text.io_mask32)
	*(.text.lock_stm32shregs)
	*(.text.unlock_stm32shregs)
	*(.text.io_mask32_stm32shregs)
	*(.text.io_setbits32)
	*(.text.io_clrbits32)
	*(.text.io_clrsetbits32)
	*(.text.get_ddrctrl_base)
	*(.text.get_ddrphy_base)
	*(.text.ddr_disable_clock)
	*(.text.ddr_enable_clock)
	*(.text.do_sw_handshake)
	*(.text.do_sw_ack)
	*(.text.ddr_sw_self_refresh_in)
	*(.text.ddr_sw_self_refresh_exit)
	*(.text.get_ddrphy_calibration)
	*(.text.ddr_standby_sr_entry)
	*(.text.ddr_standby_sr_exit)
	*(.text.ddr_sr_mode_ssr)
	*(.text.ddr_sr_mode_asr)
	*(.text.ddr_sr_mode_hsr)
	*(.text.ddr_read_sr_mode)
	*(.text.ddr_set_sr_mode)
	*(.text.ddr_save_sr_mode)
	*(.text.ddr_restore_sr_mode)
	*(.text.stm32mp_with_pmic)
	*(.text.stm32mp_pm_get_pmic)
	*(.text.stm32_pwr_base)
	*(.text.stm32_rcc_base)
	*(.text.stm32_reset_system)
	*(.text.sip_service)
	*(.text.oem_service)
	*(.text.sm_platform_handler)
	*(.text.pm_domain_scv_handler)
	*(.text.io_setbits32_stm32shregs)
	*(.text.io_clrbits32_stm32shregs)
	*(.text.pwr_scv_handler)
	*(.text.mobj_get_va)
	*(.text.mobj_get_pa)
	*(.text.get_retram_resume_ctx)
	*(.text.get_pm_mailbox)
	*(.text.save_time)
	*(.text.print_ccm_decryption_duration)
	*(.text.restore_time)
	*(.text.stm32mp_pm_wipe_context)
	*(.text.save_ddr_training_area)
	*(.text.save_pll1_settings)
	*(.text.load_earlyboot_pm_mailbox)
	*(.text.save_teeram_in_ddr)
	*(.text.enable_pm_mailbox)
	*(.text.gate_pm_context_clocks)
	*(.text.stm32mp_pm_save_context)
	*(.text.stm32mp_pm_restore_context)
	*(.text.stm32mp_pm_shutdown_context)
	*(.text.read_cntp_ctl)
	*(.text.write_cntp_ctl)
	*(.text.read_cntv_ctl)
	*(.text.write_cntv_ctl)
	*(.text.set_rcc_it_priority)
	*(.text.restore_rcc_it_priority)
	*(.text.wait_console_flushed)
	*(.text.cpu_wfi)
	*(.text.stm32_pm_cpu_wfi)
	*(.text.stm32mp_mask_timer)
	*(.text.stm32_enter_cstop)
	*(.text.stm32_exit_cstop)
	*(.text.stm32_enter_cstop_shutdown)
	*(.text.stm32_enter_csleep)
	*(.text.plat_panic)
	*(.text.stm32_pm_cpu_power_down_wfi)
	*(.text.stm32mp_bkpsram_resume)
	*(.text.stm32mp_ccm_encrypt_teeram)
	*(.text.stm32mp_sysram_resume)
	*(.text.stm32mp_cpu_reset_state)
	*(.text.stm32mp1_is_retram_during_standby)
	*(.text.need_to_backup_cpu_context)
	*(.text.need_to_backup_stop_context)
	*(.text.get_pm_domain_state)
	*(.text.stm32mp1_set_pm_domain_state)
	*(.text.is_supported_mode)
	*(.text.stm32mp1_get_lp_soc_mode)
	*(.text.read_isr)
	*(.text.lock_state_access)
	*(.text.unlock_state_access)
	*(.text.psci_affinity_info)
	*(.text.stm32mp_register_online_cpu)
	*(.text.raise_sgi0_as_secure)
	*(.text.release_secondary_early_hpen)
	*(.text.psci_cpu_on)
	*(.text.psci_cpu_off)
	*(.text.enter_cstop_suspend)
	*(.text.plat_suspend)
	*(.text.plat_resume)
	*(.text.plat_can_suspend)
	*(.text.psci_system_suspend)
	*(.text.psci_system_off)
	*(.text.psci_system_reset)
	*(.text.psci_features)
	*(.text.psci_version)
	*(.text.sm_save_unbanked_regs)
	*(.text.sm_restore_unbanked_regs)
	*(.text.sm_smc_entry)
	*(.text.sm_fiq_entry)
	*(.text.sm_vect_table)
	*(.text.sm_vect_table_a15)
	*(.text.sm_vect_table_bpiall)
	*(.text.sm_init)
	*(.text.sm_get_nsec_ctx)
	*(.text.smc_arch_handler)
	*(.text.sm_from_nsec)
	*(.text.sm_pm_cpu_suspend_save)
	*(.text.sm_pm_cpu_suspend)
	*(.text.sm_pm_cpu_do_suspend)
	*(.text.sm_pm_cpu_resume)
	*(.text.sm_pm_cpu_do_resume)
	*(.text.smc_std_handler)
	*(.text.psci_cpu_suspend)
	*(.text.psci_migrate)
	*(.text.psci_migrate_info_type)
	*(.text.psci_migrate_info_up_cpu)
	*(.text.psci_mem_protect)
	*(.text.psci_mem_chk_range)
	*(.text.psci_system_reset2)
	*(.text.psci_node_hw_state)
	*(.text.tee_psci_handler)
	*(.text.psci_disable_smp)
	*(.text.psci_armv7_cpu_off)
	*(.text.gic_cpu_init)
	*(.text.gic_read_iar)
	*(.text.gic_write_eoir)
	*(.text.gic_it_handle)
	*(.text.otp_max_id)
	*(.text.bsec_base)
	*(.text.bsec_status)
	*(.text.is_invalid_mode)
	*(.text.stm32_bsec_read_otp)
	*(.text.stm32_bsec_read_debug_conf)
	*(.text.stm32_bsec_find_otp_in_nvmem_layout)
	*(.text.stm32_gpio_get_bank)
	*(.text.set_gpio_cfg)
	*(.text.stm32_pinctrl_load_config)
	*(.text.get_base)
	*(.text.iwdg_refresh)
	*(.text.stm32_iwdg_refresh)
	*(.text.io_read8)
	*(.text.notif_i2c_timeout)
	*(.text.restore_cfg)
	*(.text.i2c_flush_txdr)
	*(.text.wait_isr_event)
	*(.text.i2c_ack_failed)
	*(.text.i2c_wait_txis)
	*(.text.i2c_wait_stop)
	*(.text.i2c_transfer_config)
	*(.text.stm32_i2c_read_write_membyte)
	*(.text.stm32_i2c_resume)
	*(.text.conceal_seed_error)
	*(.text.stm32_rng_read_available)
	*(.text.get_rng_bytes_relaxed)
	*(.text.crypto_rng_read)
	*(.text.stm32_rtc_get_bypshad)
	*(.text.stm32_rtc_read_calendar)
	*(.text.stm32_rtc_get_time)
	*(.text.stm32_rtc_get_date)
	*(.text.stm32_rtc_get_calendar)
	*(.text.stm32_rtc_get_second_fraction)
	*(.text.stm32_rtc_diff_frac)
	*(.text.stm32_rtc_diff_time)
	*(.text.stm32_is_a_leap_year)
	*(.text.stm32_rtc_diff_date)
	*(.text.stm32_rtc_diff_calendar)
	*(.text.loc_chip_to_base)
	*(.text.loc_flush)
	*(.text.loc_putc)
	*(.text.loc_have_rx_data)
	*(.text.loc_getchar)
	*(.text.stm32_uart_init)
	*(.text.stpmic1_switch_off)
	*(.text.stpmic1_register_read)
	*(.text.stpmic1_register_write)
	*(.text.stpmic1_register_update)
	*(.text.atomic_store_uint)
	*(.text.refcount_set)
	*(.text.clk_disable_no_lock)
	*(.text.clk_enable_no_lock)
	*(.text.clk_enable)
	*(.text.clk_disable)
	*(.text.clk_get_rate)
	*(.text.clk_get_parent)
	*(.text.pll_ref)
	*(.text.pll_start)
	*(.text.pll_output)
	*(.text.stm32mp1_clk_lp_save_opp_pll1_settings)
	*(.text.stm32mp1_clk_pll1_settings_are_valid)
	*(.text.clock_id_to_gate_index)
	*(.text.clock_id_to_always_on_index)
	*(.text.clock_id_to_clk)
	*(.text.stm32mp_rcc_clock_id_to_clk)
	*(.text.stm32mp1_set_clkdiv)
	*(.text.save_pll34_state)
	*(.text.save_mcu_subsys_clocks)
	*(.text.restore_pll34_state)
	*(.text.restore_mcu_subsys_clocks)
	*(.text.disable_kernel_clocks)
	*(.text.enable_kernel_clocks)
	*(.text.stm32mp1_clk_save_context_for_stop)
	*(.text.stm32mp1_clk_restore_context_for_stop)
	*(.text.console_putc)
	*(.text.console_flush)
	*(.text.register_serial_console)
	*(.text.do_pm_callback)
	*(.text.call_callbacks)
	*(.text.pm_change_state)
	*(.text.itr_handle)
	*(.text.itr_raise_sgi)
	*(.text.itr_set_pmr)
	*(.text.itr_set_ipriority)
	*(.text.print_kernel_stack)
	*(.text.__do_panic)
	*(.text.atomic_cas_uint)
	*(.text.atomic_load_uint)
	*(.text.refcount_inc)
	*(.text.refcount_dec)
	*(.text.is_valid_conf_and_notnull_size)
	*(.text.core_is_buffer_inside)
	*(.text.core_is_buffer_intersect)
	*(.text.ts_get_current_session_may_fail)
	*(.text.ts_get_current_session)
	*(.text.scattered_array_relax_ptr)
	*(.text.is_user_ta_ctx)
	*(.text.fobj_init)
	*(.text.rop_init)
	*(.text.fobj_ro_paged_alloc)
	*(.text.fobj_locked_paged_alloc)
	*(.text.vm_pa2va)
	*(.text.hash_sha256_check)
	*(.text.sha256_init)
	*(.text._sha256_compress)
	*(.text.sha256_compress)
	*(.text.sha256_done)
	*(.text.sha256_process)
	*(.text.burn_stack)
	*(.text.zeromem)
	*(.text.asan_tag_heap_free)
	*(.text.asan_memset_unchecked)
	*(.text.tag_asan_free)
	*(.text.tag_asan_alloced)
	*(.text.memset_unchecked)
	*(.text.buf_get_pos)
	*(.text.bget)
	*(.text.bgetz)
	*(.text.bgetr)
	*(.text.brel)
	*(.text.bpool)
	*(.text.malloc_lock)
	*(.text.malloc_unlock)
	*(.text.print_oom)
	*(.text.raw_malloc_return_hook)
	*(.text.raw_malloc_validate_pools)
	*(.text.raw_memalign)
	*(.text.raw_malloc)
	*(.text.raw_free)
	*(.text.raw_calloc)
	*(.text.raw_realloc)
	*(.text.malloc)
	*(.text.free_helper)
	*(.text.calloc)
	*(.text.realloc_unlocked)
	*(.text.free)
	*(.text.gen_malloc_add_pool)
	*(.text.malloc_add_pool)
	*(.text.swapfunc)
	*(.text.med3)
	*(.text.qsort)
	*(.text.memchr)
	*(.text.memcpy)
	*(.text.memmove)
	*(.text.memset)
	*(.text.strcmp)
	*(.text.strlen)
	*(.text.__aeabi_uldivmod)
	*(.text.division_lqr)
	*(.text.ul_div_qr)
	*(.text.__ul_divmod)
	*(.text.snprintk)
	*(.text.vsnprintk)
	*(.text.__vsnprintf)
	*(.text.uuid2str)
	*(.text.kprintf)
	*(.text.trace_level_to_string)
	*(.text.print_thread_id)
	*(.text.print_core_id)
	*(.text.trace_printf)
	*(.text.trace_vprintf)
	*(.text.consttime_memcmp)
	*(.text.memzero_explicit)
